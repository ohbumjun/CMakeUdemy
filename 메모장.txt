https://github.com/franneck94/UdemyCmake

VSCode 편의기능
https://github.com/franneck94/VSCodeGuide/blob/master/usefulShortcuts.md

# CMake Guild

> fmt 는 A 의 public API 에서 사용될 수 있다.
target_link_libraries(A Public fmt)

> C 에서 fmt 를 사용할 수 있다. A 가 fmt 를 pubilc API 의 일부로 사용하기 때문이다.
target_link_libraries(C Public A)

target_link_libraries(B Public spdLog)

> C 에서 spdLog 를 사용할 수 없다.. B 가 spdLog 를 pubilc API 의 일부로 사용하지 않기 때문이다. 
> spdLog 는 B 의 private api 에서만 사용된다.
target_link_libraries(C Public B)

> Configure 과 Generate 의 차이
Configure 는 CMake 를 initialize 하고 build 환경을 구성한다.
이때 project source code 와 cmakelist.txt 를 참고하여
변수 세팅 옵션 등을 지정한다.

이 과정 동안 required tool, library , compiler flag 등을 체크하여
build system file 들을 만들어낸다 (ex MakeFile, Visual Studio Project) 

또한 CMakeCache.txt 를 만들어내는 데, build 과정 중에
config setting 및 cached variable 들을 저장하는 파일이다.

Ganerate 은 실제 build file (ex. Make File, IDE Project file) 들을 만들어낸다.
Configurte 단계에서 지정해준 config 를 참조해서 만든다.

정리 :  cofigure 는 project 를 분석하여 variable option 등을 지정하고 cmakeCache.txt 를 만든다.
        반면 generate 단계는 config 를 이용하여 실제 build system 을 만들어낸다.

> LTO 
Link Time Optimization
ex) compiler 가 better runtime 을 위해 나의 코드를 optimize 하게 하는 것이다.
이 과정은 각 function 단위로 진행된다. 함수들의 subsequent call 단위로 진행되지는 않는다.

특정 함수를 다른 translation unit 들에서 사용한다고 하면 
컴파일러가 특정 operatior 을 cancel out 할 수 있는지를 보게 된다.

ex) a.c, b.c 에 대한 파일들을 모두 분석해보니 foo2, foo3 라는 함수가 있는데 조건문을 보니 해당 함수들이 애초에 호출될 일이 없다고 판단하면
해당 함수들에 대한 binary data 를 link 하지 않는다.

이러한 과정은 여러 translation unit 에 대해 생성한 obj 파일을 하나의 link 파일로 만드는 과정에서 수행할 것이다.
linker 가 모든 함수들을 보면서 단하나의 obj 에서 호출되지 않는 함수는 애초에 link 시키지도 않는 것이다.

자. 이 과정은 같은 obj 파일에 대한 컴파일 타임 시점에서는 볼 수 없다.
하지만 오직 link time 에서만 볼 수 있다.

우리의 경우 predefine 된 cmake module 을 이용하여 이것을 적용할 것이다.
